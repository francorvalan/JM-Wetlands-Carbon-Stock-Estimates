)
Soil_data$Clase_textural_B<- Soil_textures_Spanish_names(Soil_data,"Clase_textural")
USDA_triangle_plot(Soil_data)
source("./01_Codes/Functions/Generic_functions.R")
USDA_triangle_plot(Soil_data)
Soil_data$SAND
USDA
USDA$Sand
source("./01_Codes/Functions/Generic_functions.R")
Soil_data<- Normalizacion_texturas(Soil_data, "SAND", "SILT", "CLAY")
USDA_triangle_plot(Soil_data)
Soil_data
USDA_triangle_plot(Soil_data)
source("./01_Codes/Functions/Generic_functions.R")
USDA_triangle_plot(Soil_data)
source("./01_Codes/Functions/Generic_functions.R")
USDA_triangle_plot(Soil_data)
source("./01_Codes/Functions/Generic_functions.R")
USDA_triangle_plot(Soil_data)
USDA_triangle_plot(Soil_data)
source("./01_Codes/Functions/Generic_functions.R")
USDA_triangle_plot(Soil_data)
source("./01_Codes/Functions/Generic_functions.R")
USDA_triangle_plot(Soil_data)
#
setwd("C:/Users/francisco.corvalan/OneDrive - Ausenco/Working Documents/06-Geomática/10_Drone/02_Processed_data/GSD_7cm/")
#
setwd("C:/Users/francisco.corvalan/OneDrive - Ausenco/Working Documents/06-Geomática/10_Drone/02_Processed_data/GSD_7cm/")
lapply(dependencies,require(),character.only=T)
#
dependencies <- c("terra","sf","stars","tmap")
lapply(dependencies,require,character.only=T)
setwd("C:/Users/francisco.corvalan/OneDrive - Ausenco/Working Documents/06-Geomática/10_Drone/02_Processed_data/GSD_7cm/")
list.files("./",pattern = "$.tif",full.names = T)
list.files("./",pattern = ".tif",full.names = T)
list.files("./",pattern = "$.tif",full.names = T,recursive = T)
list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files <- grep("Auxiliares",files,invert = T,value = T)
files
files <- grep("Auxiliares|DEM",files,invert = T,value = T)
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files <- grep("Auxiliares|DEM",files,invert = T,value = T)
files
lapply(files, strsplit,"/")
lapply(files, strsplit,"/","[[",1)
lapply((lapply(files, strsplit,"/"),"[[",1)
lapply(lapply(files, strsplit,"/"),"[[",1)
lapply(lapply(files, strsplit,"/"),"[",1)
lapply(lapply(files, strsplit,"/"),"[[",1)
lapply(lapply(files, strsplit,"/")[[1]],"[[",1)
(files,function(x) {strsplit(x,"/")[1][1]})
(files,function(x) strsplit(x,"/")[1][1])
lapply(files,function(x) strsplit(x,"/")[1][1])
lapply(files,function(x) strsplit(x,"/")[[1]][1])
lapply(files,function(x) strsplit(x,"/")[[1]][2])
lapply(files,function(x) strsplit(x,"/")[[1]][2]) %>% unlist()
lapply(files,function(x) strsplit(x,"/")[[1]][2]) %>% unlist() %>% unique()
Sitios<- lapply(files,function(x) strsplit(x,"/")[[1]][2]) %>% unlist() %>% unique()
source("C:/Users/francisco.corvalan/JM Wetlands Carbon Stock Estimates/01_Codes/Functions/Generic_functions.R")
RGB <- grep("RGB",files,value = T)
RGB
i=Sitios[[1]]
i
grep(i,Sitios,value = T)
grep(i,files,value = T)
files_i<- grep(i,files,value = T)
RGB_i <- rast(grep("RGB",i,value = T))
grep("RGB",i,value = T)
RGB_i <- rast(grep("RGB",files_i,value = T))
RGB_i
RGB_i <- rast(grep("RGB",files_i,value = T))[[1:3]]
RGB_i
Multiestral_i <- grep("Multiespectral",files_i,value = T)
Multiestral_i
files_i
Multiestral_i <- grep("espectral",files_i,value = T)
Multiestral_i
lapply(files_i, rast)
Multiestral_i <- lapply(Multiestral_i_files, rast)
Multiestral_i_files
Multiestral_i_files
Multiestral_i_files <- grep("espectral",files_i,value = T)
Multiestral_i <- lapply(Multiestral_i_files, rast)
Multiestral_i_files
Multiestral_i
Multiestral_i <- do.call(Multiestral_i,mosaic,fun="mean")
Multiestral_i <- rast(Multiestral_i_files)
Multiestral_i
Multiestral_i$multiespectral_7cm_1
Multiestral_i$multiespectral_7cm_1 %>% summary()
2^32
2^16
2^8
2^8 * 2^8
outputdir <- "../../../08_Results/03_Image_process/01_Drone/B_and_Multiespectral_stacks/"
if(!dir.exists(outputdir))(dir.create(outputdir))
for(i in Sitios){
i=Sitios[[1]]
files_i<- grep(i,files,value = T)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
Multiestral_i_files <- grep("espectral",files_i,value = T)
if(length(Multiestral_i_files)>1)({
Multiestral_i <- lapply(Multiestral_i_files, rast)
Multiestral_i <- do.call(mosaic,c(Multiestral_i, fun = "mean"))
}) else({
Multiestral_i <- rast(Multiestral_i_files)
})
Multiestral_i <- Multiestral_i %>%
project("EPSG:5344",method="cubicspline",res=c(0.7,0.7))
names(Multiestral_i) <- c("Green","NIR","Red","RedEdge")
Blue<- Blue %>% project(Multiestral_i)
names(Blue) <- "Blue"
output<- c(Blue,Multiestral_i)
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U")
}
Multiestral_i
plot(Multiestral_i)
Multiestral_i %>% slice(1:4)
Multiestral_i %>% select(1:4)
Multiestral_i <- Multiestral_i[[1:4]]
names(Multiestral_i) <- c("Green","NIR","Red","RedEdge")
Blue<- Blue %>% project(Multiestral_i)
names(Blue) <- "Blue"
Multiestral_i <- Multiestral_i[[1:4]] %>%
project("EPSG:5344",method="cubicspline",res=c(0.7,0.7),
threads=8)
Blue<- Blue %>% project(Multiestral_i,
threads=8)
names(Blue) <- "Blue"
output<- c(Blue,Multiestral_i)
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U")
for(i in Sitios){
i=Sitios[[1]]
files_i<- grep(i,files,value = T)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
Multiestral_i_files <- grep("espectral",files_i,value = T)
if(length(Multiestral_i_files)>1)({
Multiestral_i <- lapply(Multiestral_i_files, rast)
Multiestral_i <- do.call(mosaic,c(Multiestral_i, fun = "mean"))
}) else({
Multiestral_i <- rast(Multiestral_i_files)
})
Multiestral_i <- Multiestral_i[[1:4]] %>%
project("EPSG:5344",method="cubicspline",res=c(0.2,0.2),
threads=8)
names(Multiestral_i) <- c("Green","NIR","Red","RedEdge")
Blue<- Blue %>% project(Multiestral_i,
threads=8)
names(Blue) <- "Blue"
output<- c(Blue,Multiestral_i)
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U",overwrite=T)
}
for(i in Sitios){
#i=Sitios[[1]]
files_i<- grep(i,files,value = T)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
Multiestral_i_files <- grep("espectral",files_i,value = T)
if(length(Multiestral_i_files)>1)({
Multiestral_i <- lapply(Multiestral_i_files, rast)
Multiestral_i <- do.call(mosaic,c(Multiestral_i, fun = "mean"))
}) else({
Multiestral_i <- rast(Multiestral_i_files)
})
Multiestral_i <- Multiestral_i[[1:4]] %>%
project("EPSG:5344",method="cubicspline",res=c(0.2,0.2),
threads=8)
names(Multiestral_i) <- c("Green","NIR","Red","RedEdge")
Blue<- Blue %>% project(Multiestral_i,
threads=8)
names(Blue) <- "Blue"
output<- c(Blue,Multiestral_i)
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U",overwrite=T)
}
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U",overwrite=T)
output
2^16
plot(Multiestral_i)
plot(Blue)
values(Blue)[[1]]
Blue[[1]][[1]]
Blue[[1]][[1]][[1]]
Blue[[1]][1,]
Blue[[1]][1,1]
Blue[Blue==65280] <- NA
plot
plot(Blue)
Multiestral_i[1,1]
Multiestral_i[Multiestral_i==65535] <- NA
plot(Multiestral_i)
output<- c(Blue,Multiestral_i)
Blue<- Blue %>% project(Multiestral_i,
threads=8)
plot(Blue)
Blue
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
Blue[Blue==65280] <- NA
Blue <- Blue %>% project(Multiestral_i,
threads=8)
plot(Blue)
Blue
Multiestral_i
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
plot(Blue)
Blue <- Blue*(2^8)
plot(Blue)
Blue <- Blue %>% project(Multiestral_i,
threads=8)
plot(Blue)
Blue[Blue==65280] <- NA
plot(Blue)
Multiestral_i <- rast(Multiestral_i_files)
Multiestral_i <- Multiestral_i[[1:4]] %>%
project("EPSG:5344",method="cubicspline",res=c(0.2,0.2),
threads=8)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
names(Multiestral_i) <- c("Green","Red","RedEdge","NIR")
plot(Blue)
Blue <- Blue %>% project(Multiestral_i,
threads=8)
Blue[Blue==65280] <- NA
plot(Blue)
plot(plot(Blue))
plot(Multiestral_i)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
plot(Blue)
Blue <- Blue %>% project(Multiestral_i,
threads=8)
plot(Blue)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue %>% project(Multiestral_i, mask=T,
threads=8)
plot(Blue)
plot(Blue)
Blue
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Multiestral_i <- rast(Multiestral_i_files)
Multiestral_i_files
Multiestral_i_files <- grep("espectral",files_i,value = T)
Multiestral_i_files
files_i
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files <- grep("Auxiliares|DEM",files,invert = T,value = T)
Sitios<- lapply(files,function(x) strsplit(x,"/")[[1]][2]) %>% unlist() %>% unique()
RGB <- grep("RGB",files,value = T)
outputdir <- "../../../08_Results/03_Image_process/01_Drone/B_and_Multiespectral_stacks/"
#i=Sitios[[1]]
files_i<- grep(i,files,value = T)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
Multiestral_i_files <- grep("espectral",files_i,value = T)
Multiestral_i_files
Multiestral_i_files <- grep("espectral",files_i,value = T)
Multiestral_i <- rast(Multiestral_i_files)
Multiestral_i <- Multiestral_i[[1:4]] %>%
project("EPSG:5344",method="cubicspline",res=c(0.2,0.2),
threads=8)
names(Multiestral_i) <- c("Green","Red","RedEdge","NIR")
plot(Blue)
Blue <- Blue %>% project(Multiestral_i, mask=T,
threads=8)
Blue[Blue==65280] <- NA
plot(Blue)
Multiestral_i[Multiestral_i==65535] <- NA
names(Blue) <- "Blue"
output<- c(Blue,Multiestral_i)
plot
plot(output)
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U",overwrite=T)
for(i in Sitios){
#i=Sitios[[1]]
files_i<- grep(i,files,value = T)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
Multiestral_i_files <- grep("espectral",files_i,value = T)
if(length(Multiestral_i_files)>1)({
Multiestral_i <- lapply(Multiestral_i_files, rast)
Multiestral_i <- do.call(mosaic,c(Multiestral_i, fun = "mean"))
}) else({
Multiestral_i <- rast(Multiestral_i_files)
})
Multiestral_i <- Multiestral_i[[1:4]] %>%
project("EPSG:5344",method="cubicspline",res=c(0.2,0.2),
threads=8)
names(Multiestral_i) <- c("Green","Red","RedEdge","NIR")
plot(Blue)
Blue <- Blue %>% project(Multiestral_i, mask=T,
threads=8)
Blue[Blue==65280] <- NA
plot(Blue)
Multiestral_i[Multiestral_i==65535] <- NA
names(Blue) <- "Blue"
output<- c(Blue,Multiestral_i)
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U",overwrite=T)
}
Sitios[-1]
Sitios
files
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files
setwd("C:/Users/francisco.corvalan/OneDrive - Ausenco/Working Documents/06-Geomática/10_Drone/02_Processed_data/GSD_7cm/")
source("C:/Users/francisco.corvalan/JM Wetlands Carbon Stock Estimates/01_Codes/Functions/Generic_functions.R")
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files
Sys.setlocale("LC_ALL", "en_US.UTF-8")
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files <- grep("Auxiliares|DEM",files,invert = T,value = T)
Sitios<- lapply(files,function(x) strsplit(x,"/")[[1]][2]) %>% unlist() %>% unique()
RGB <- grep("RGB",files,value = T)
outputdir <- "../../../08_Results/03_Image_process/01_Drone/B_and_Multiespectral_stacks/"
if(!dir.exists(outputdir))(dir.create(outputdir))
Sitios
Sitios[-2]
for(i in Sitios[-2]){
#i=Sitios[[1]]
files_i<- grep(i,files,value = T)
# RGB files are in 8 bits and Multiespectral in 16, so I transform it to
# syntetic 16 bits
Blue <- rast(grep("RGB",files_i,value = T))[[3]]
Blue <- Blue*(2^8)
Multiestral_i_files <- grep("espectral",files_i,value = T)
if(length(Multiestral_i_files)>1)({
Multiestral_i <- lapply(Multiestral_i_files, rast)
Multiestral_i <- do.call(mosaic,c(Multiestral_i, fun = "mean"))
}) else({
Multiestral_i <- rast(Multiestral_i_files)
})
Multiestral_i <- Multiestral_i[[1:4]] %>%
project("EPSG:5344",method="cubicspline",res=c(0.2,0.2),
threads=8)
names(Multiestral_i) <- c("Green","Red","RedEdge","NIR")
Blue <- Blue %>% project(Multiestral_i, mask=T,
threads=8)
Blue[Blue==65280] <- NA
Multiestral_i[Multiestral_i==65535] <- NA
names(Blue) <- "Blue"
output<- c(Blue,Multiestral_i)
writeRaster(output,paste0(outputdir,i,".tif"),datatype="INT2U",overwrite=T)
}
files <- list.files("../../../08_Results/03_Image_process/01_Drone/B_and_Multiespectral_stacks/",
pattern = ".tif")
files
files <- list.files("../../../08_Results/03_Image_process/01_Drone/B_and_Multiespectral_stacks/",
pattern = ".tif",full.names = T)
files
Sys.setlocale("LC_ALL", "en_US.UTF-8")
dependencies <- c("terra","sf","stars","tmap")
lapply(dependencies,require,character.only=T)
options(digits = 10)
setwd("C:/Users/francisco.corvalan/OneDrive - Ausenco/Working Documents/06-Geomática/10_Drone/02_Processed_data/GSD_7cm/")
source("C:/Users/francisco.corvalan/JM Wetlands Carbon Stock Estimates/01_Codes/Functions/Generic_functions.R")
files<- list.files("./",pattern = ".tif$",full.names = T,recursive = T)
files <- grep("Auxiliares|DEM",files,invert = T,value = T)
basename(files)
gsub(".tif","",basename(files))
files <- list.files("../../../08_Results/03_Image_process/01_Drone/B_and_Multiespectral_stacks/",
pattern = ".tif",full.names = T)
gsub(".tif","",basename(files))
for (i in files) {
image <- rast(i)
index_i <- Multiespectral_Indexes(image$Blue,image$Green,image$Red,image$NIR,scale=1000)
writeRaster(index_i,paste0("../../../08_Results/03_Image_process/01_Drone/Indices/",basename(files)))
}
for (i in files) {
image <- rast(i)
index_i <- Multiespectral_Indexes(image$Blue,image$Green,image$Red,image$NIR,image$RedEdge,scale=1000)
writeRaster(index_i,paste0("../../../08_Results/03_Image_process/01_Drone/Indices/",basename(files)))
}
for (i in files) {
image <- rast(i)
index_i <- Multiespectral_Indexes(image$Blue,image$Green,image$Red,image$NIR,image$RedEdge,scale=1000)
writeRaster(index_i,paste0("../../../08_Results/03_Image_process/01_Drone/Indices/",basename(files)),datatype="INT2S")
index_i <- NULL
}
writeRaster(index_i,paste0("../../../08_Results/03_Image_process/01_Drone/Indices/",basename(i)),datatype="INT2S")
index_i <- NULL
gc()
image
sym(c(
BNDVI,CI_GREEN,CI_RED,CVI,DVI,DVI_GREEN,
DVI_REG,
EVI, EVI2 ,GARI ,GNDVI ,GOSAVI,GRVI,
LCI,MCARI,MCARI1,MCARI2,MNLI, MSR,
MSR_REG,MTCI,NDREa,NDREI,NAVI, NDVI,
OSAVI,OSAVI_GREEN,OSAVI_REG,RDVI,
RDVI_REG,RGBVI,RTVI_CORE,RVI,SAVI,
SAVI_GREEN,S_CCCI,SIPI, SR_REG,TCARI,
TCARI_OSAVI,TVI,VARI,WDRVI))
{{c(a,v,b}}
{{c(a,v,b)}}
{{c(image)}}
{{(image)}}
!{{(image)}}
indices_strings <- sapply(indices, function(x) deparse(substitute(x)))
c(
BNDVI,CI_GREEN,CI_RED,CVI,DVI,DVI_GREEN,
DVI_REG,
EVI, EVI2 ,GARI ,GNDVI ,GOSAVI,GRVI,
LCI,MCARI,MCARI1,MCARI2,MNLI, MSR,
MSR_REG,MTCI,NDREa,NDREI,NAVI, NDVI,
OSAVI,OSAVI_GREEN,OSAVI_REG,RDVI,
RDVI_REG,RGBVI,RTVI_CORE,RVI,SAVI,
SAVI_GREEN,S_CCCI,SIPI, SR_REG,TCARI,
TCARI_OSAVI,TVI,VARI,WDRVI)
indices <- c(
BNDVI,CI_GREEN,CI_RED,CVI,DVI,DVI_GREEN,
DVI_REG,
EVI, EVI2 ,GARI ,GNDVI ,GOSAVI,GRVI,
LCI,MCARI,MCARI1,MCARI2,MNLI, MSR,
MSR_REG,MTCI,NDREa,NDREI,NAVI, NDVI,
OSAVI,OSAVI_GREEN,OSAVI_REG,RDVI,
RDVI_REG,RGBVI,RTVI_CORE,RVI,SAVI,
SAVI_GREEN,S_CCCI,SIPI, SR_REG,TCARI,
TCARI_OSAVI,TVI,VARI,WDRVI)
indices <- c(image,image)
indices_strings <- sapply(indices, function(x) deparse(substitute(x)))
indices_strings
source("C:/Users/francisco.corvalan/JM Wetlands Carbon Stock Estimates/01_Codes/Functions/Generic_functions.R")
for (i in files) {
image <- rast(i) %>%
project("EPSG:5344",method="cubicspline",res=c(0.4,0.4),
threads=8)/2^16
index_i <- Multiespectral_Indexes(image$Blue,image$Green,image$Red,image$NIR,image$RedEdge,scale=1000)
writeRaster(index_i,paste0("../../../08_Results/03_Image_process/01_Drone/Indices/",
gsub(".tif","_scale1000.tif",basename(i))),
datatype="INT2S",overwrite=T)
index_i <- NULL
gc()
}
image
source("C:/Users/francisco.corvalan/JM Wetlands Carbon Stock Estimates/01_Codes/Functions/Generic_functions.R")
for (i in files) {
image <- rast(i) %>%
project("EPSG:5344",method="cubicspline",res=c(0.4,0.4),
threads=8)/2^16
index_i <- Multiespectral_Indexes(image$Blue,image$Green,image$Red,image$NIR,image$RedEdge,scale=1000)
writeRaster(index_i,paste0("../../../08_Results/03_Image_process/01_Drone/Indices/",
gsub(".tif","_scale1000.tif",basename(i))),
datatype="INT2S",overwrite=T)
index_i <- NULL
gc()
}
st_read("C:/Users/francisco.corvalan/Downloads/Borrar/")
st_read("C:/Users/francisco.corvalan/Downloads/Borrar/Sitios de monitoreo de calidad de agua_final_7agosto.kmz")
library(sf)
st_read("C:/Users/francisco.corvalan/Downloads/Borrar/Sitios de monitoreo de calidad de agua_final_7agosto.kmz")
st_read("C:/Users/francisco.corvalan/Downloads/Borrar/Sitios_monitore_Cuenca Andalgalá.kml")
asd<- st_read("C:/Users/francisco.corvalan/Downloads/Borrar/Sitios_monitore_Cuenca Andalgalá.kml")
asd
asd %>% head()
View(asd)
View(asd)
asd$Description
asd %>% data.frame()
asd<- st_read("C:/Users/francisco.corvalan/Downloads/Borrar/Sitios_monitore_Cuenca Andalgalá.kml","pozos_hidro_mara_24_2:ID")
asd<- st_read("C:/Users/francisco.corvalan/Downloads/Borrar/Sitios_monitore_Cuenca Andalgalá.kml",
"ID")
Programa_monitoreo <- readxl::read_xlsx("C:/Users/francisco.corvalan/Downloads/Borrar/Monitoreo_hidrológico/Programa_monitoreo_hidrológico.xlsx")
Programa_monitoreo
Localizaciones <- readxl::read_xlsx("C:/Users/francisco.corvalan/Downloads/Borrar/Monitoreo_hidrológico/Sitios_monitoreo_B.xlsx")
Localizaciones
library(dplyr)
merge(Programa_monitoreo,Localizaciones,by="ID",all.x=T)
merge(Programa_monitoreo,Localizaciones,by.x="ID",by.y="ID",all.x=T)
Programa_monitoreo <- readxl::read_xlsx("C:/Users/francisco.corvalan/Downloads/Borrar/Monitoreo_hidrológico/Programa_monitoreo_hidrológico.xlsx")
merge(Programa_monitoreo,Localizaciones,by="ID",all.x=T)
Programa_monitoreo<- merge(Programa_monitoreo,Localizaciones,by="ID",all.x=T)
complete.cases(Programa_monitoreo$Lat) %>% sum()
Programa_monitoreo <- Programa_monitoreo%>%
mutate_all(~ if_else(is.na(.), "-", as.character(.)))
xlsx::write.xlsx2(Programa_monitoreo,"C:/Users/francisco.corvalan/Downloads/Borrar/Monitoreo_hidrológico/Programa_monitoreo_hidrológico_Info_sitio.xlsx")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
libraries <- c("dplyr","tidyr","sf","tmap")
lapply(libraries, require,character.only =T)
tmap_mode("view")
source("./01_Codes/Functions/Generic_functions.R")
Sites<- read.csv2("./02_Data/01_Samples/Original_data/Site_locations.csv", fileEncoding = "latin1")
